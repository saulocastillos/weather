{"version":3,"sources":["assets/cold-bg.jpg","assets/warm-bg.jpg","styles.js","config/api.js","components/organisms/ButtonBox/styles.js","components/organisms/ButtonBox/index.js","components/organisms/WeatherBox/styles.js","components/atoms/WeatherMain/styles.js","components/atoms/WeatherMain/index.js","components/molecules/TempBox/styles.js","components/molecules/TempBox/index.js","components/organisms/WeatherBox/index.js","components/organisms/LocalizationBox/styles.js","components/atoms/Location/styles.js","components/atoms/Location/index.js","components/atoms/DateNow/styles.js","components/atoms/DateNow/index.js","components/organisms/LocalizationBox/index.js","components/organisms/SearchBox/styles.js","components/organisms/SearchBox/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GlobalStyle","createGlobalStyle","cold","warm","api","key","process","local","REACT_APP_KEY","base","Container","styled","div","Button","button","ButtonBox","handleClick","children","onClick","WeatherMain","TempBox","WeatherBox","weather","Math","round","main","temp","Location","DateNow","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","LocalizationBox","name","sys","country","Input","input","SearchBox","setQuery","query","fetchAPI","location","type","placeholder","onChange","e","target","value","onKeyPress","evt","require","config","App","useState","setWeather","setLocation","city","setCity","a","fetch","then","res","json","result","useEffect","axios","get","response","JSON","parse","data","replace","country_name","search","className","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,ssBCKpC,IAAMC,EAAcC,YAAH,IAUIC,IAOAC,K,+CCjBbC,EALH,CACVC,IAAKC,uGAAYC,MAAQD,uGAAYC,MAAMC,cAAgBF,mCAC3DG,KAAM,4C,oeCAD,IAAMC,EAAYC,IAAOC,IAAV,KAKTC,EAASF,IAAOG,OAAV,KCHJ,SAASC,EAAT,GAAkD,IAA9BC,EAA6B,EAA7BA,YAA6B,IAAhBC,gBAAgB,MAAL,GAAK,EAC9D,OACE,kBAACP,EAAD,KACE,kBAACG,EAAD,CAAQK,QAASF,GAAcC,I,8FCL9B,IAAMP,EAAYC,IAAOC,IAAV,K,4KCAf,IAAMF,EAAYC,IAAOC,IAAV,KCEP,SAASO,EAAT,GAAkC,IAAZF,EAAW,EAAXA,SACnC,OACE,kBAAC,EAAD,KACGA,G,sZCLA,IAAMP,EAAYC,IAAOC,IAAV,KCEP,SAASQ,EAAT,GAA8B,IAAZH,EAAW,EAAXA,SAC/B,OACE,kBAAC,EAAD,KACGA,GCAQ,SAASI,EAAT,GAAgC,IAAXC,EAAU,EAAVA,QAClC,OACE,kBAAC,EAAD,KAEwB,qBAAZA,EACL,oCACC,kBAACF,EAAD,KACGG,KAAKC,MAAMF,EAAQG,KAAKC,MAD3B,SAGA,kBAACP,EAAD,KACGG,EAAQA,QAAQ,GAAGG,OAGvB,sC,2EClBJ,IAAMf,EAAYC,IAAOC,IAAV,K,mMCAf,IAAMF,EAAYC,IAAOC,IAAV,KCEP,SAASe,EAAT,GAA+B,IAAZV,EAAW,EAAXA,SAChC,OACE,kBAAC,EAAD,KAAYA,G,0NCJT,IAAMP,EAAYC,IAAOC,IAAV,KCEP,SAASgB,IAetB,OACE,kBAAC,EAAD,KAdkB,SAAAC,GAClB,IAIIC,EAFO,CAAC,SAAS,SAAS,UAAU,YAAY,WAAW,SAAS,YAEzDD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EANS,CAAC,UAAU,WAAW,QAAQ,QAAQ,MAAM,OAAO,OAClD,SAAS,YAAY,UAAU,WAAW,YAKrCL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,aAAkBE,EAAlB,YAA0BE,EAA1B,YAAmCE,GAKhCE,CAAY,IAAIC,OCdR,SAASC,EAAT,GAAqC,IAAXlB,EAAU,EAAVA,QACvC,OACE,kBAAC,EAAD,KAEwB,qBAAZA,EACN,oCACA,kBAACK,EAAD,KAAWL,EAAQmB,KAAnB,KAA2BnB,EAAQoB,IAAIC,SACvC,kBAACf,EAAD,OAEA,sC,mlBCdH,IAAMlB,EAAYC,IAAOC,IAAV,KAKTgC,EAAQjC,IAAOkC,MAAV,KCHH,SAASC,EAAT,GAA2D,IAAvCC,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,SAAqB,EAAXC,SAQ5D,OACE,kBAAC,EAAD,KACE,kBAACN,EAAD,CACEO,KAAK,OACLC,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIP,EAASO,EAAEC,OAAOC,QACjCA,MAAOR,EACPS,WAbS,SAAAC,GACE,UAAZA,EAAIrD,KACL4C,QCGNU,EAAQ,IAAUC,SA8DHC,MA5Df,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENd,EAFM,KAECD,EAFD,OAGiBe,mBAAS,IAH1B,mBAGNxC,EAHM,KAGGyC,EAHH,OAImBD,mBAAS,IAJ5B,mBAINZ,EAJM,KAIIc,EAJJ,OAKWF,mBAAS,IALpB,mBAKNG,EALM,KAKAC,EALA,cAOEjB,IAPF,2EAOb,sBAAAkB,EAAA,sEACQC,MAAM,GAAD,OAAIhE,EAAIK,KAAR,qBAAyBuC,GAASE,EAAlC,+BAAiE9C,EAAIC,MACvEgE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJT,EAAWS,GACXzB,EAAS,OALrB,4CAPa,sBA8Bb,OAVA0B,qBAAU,WAAI,4CACZ,8BAAAN,EAAA,sEACyBO,IAAMC,IAAN,qCADzB,cACQC,EADR,gBAEqBC,KAAKC,MAAMF,EAASG,KAAKC,QAAQ,YAAY,IAAIA,QAAQ,IAAI,KAFlF,OAEQD,EAFR,OAGEf,EAAY,GAAD,OAAIe,EAAKd,KAAT,aAAkBc,EAAKE,eAClCf,EAAQa,EAAKd,MAJf,4CADY,uBAAC,WAAD,wBAOZiB,KACA,CAAChC,IAGD,yBAAKiC,UAAmC,oBAAhB7D,EAAQG,MACxBH,EAAQG,KAAKC,KAAO,GACtB,WACA,OACJ,8BACE,kBAACoB,EAAD,CACEC,SAAUA,EACVC,MAAOA,EACP5C,IAAKA,EACL2D,WAAYA,EACZb,SAAUA,EACVD,SAAUA,IAEZ,kBAAClC,EAAD,CAAWC,YAAa,SAAAsC,GA3B5BL,MA2BI,UAAoDgB,EAApD,iBACyB,oBAAhB3C,EAAQG,KACf,oCACE,kBAACe,EAAD,CACElB,QAASA,IAEX,kBAACD,EAAD,CACEC,QAASA,KAGV,wCCvDP8D,EAAcC,QACW,cAA7BC,OAAOpC,SAASqC,UAEe,UAA7BD,OAAOpC,SAASqC,UAEhBD,OAAOpC,SAASqC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAO9B,GAC9B+B,UAAUC,cACPC,SAASH,GACTrB,MAAK,SAAAyB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKE1C,GAAUA,EAAO2C,UACnB3C,EAAO2C,SAAST,KAMlBO,QAAQC,IAAI,sCAGR1C,GAAUA,EAAO4C,WACnB5C,EAAO4C,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OAAO,oCACd,kBAAC5G,EAAD,MACA,kBAAC,EAAD,OACG6G,SAASC,eAAe,SDatB,SAAkBlD,GACvB,GAA6C,kBAAmB+B,UAAW,CAGzE,GADkB,IAAIoB,IAAIzG,WAAwBgF,OAAOpC,SAAS8D,MACpDC,SAAW3B,OAAOpC,SAAS+D,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMpF,WAAN,sBAEP8E,IAgEV,SAAiCM,EAAO9B,GAEtCQ,MAAMsB,EAAO,CACXyB,QAAS,CAAE,iBAAkB,YAE5B9C,MAAK,SAAAO,GAEJ,IAAMwC,EAAcxC,EAASuC,QAAQxC,IAAI,gBAEnB,MAApBC,EAASyC,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C3B,UAAUC,cAAc2B,MAAMlD,MAAK,SAAAyB,GACjCA,EAAa0B,aAAanD,MAAK,WAC7BiB,OAAOpC,SAASuE,eAKpBhC,EAAgBC,EAAO9B,MAG1B6C,OAAM,WACLJ,QAAQC,IACN,oEAvFAoB,CAAwBhC,EAAO9B,GAI/B+B,UAAUC,cAAc2B,MAAMlD,MAAK,WACjCgC,QAAQC,IACN,iHAMJb,EAAgBC,EAAO9B,OCvC/BgC,K","file":"static/js/main.1a53c8c3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cold-bg.c97cb84b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/warm-bg.635ed87d.jpg\";","import { createGlobalStyle } from 'styled-components';\n\nimport cold from './assets/cold-bg.jpg'\nimport warm from './assets/warm-bg.jpg'\n\nexport const GlobalStyle = createGlobalStyle`\n  *{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n  body {\n    font-family: 'montserrat',sans-serif;\n  }\n  .app {\n    background-image: url(${cold});\n    background-size: cover;\n    background-position: bottom;\n    transition: 0.9 ease-out;\n  }\n  \n  .app.warm {\n    background-image: url(${warm});\n  }\n  \n  main {\n    min-height: 100vh;\n    background-image: linear-gradient(to bottom, rgba(0,0,0,0.2), rgba(0,0,0,0.75));\n    padding: 25px;\n  }\n`;","const api = {\n  key: process.env.local ? process.env.local.REACT_APP_KEY : process.env.REACT_APP_KEY,\n  base: 'https://api.openweathermap.org/data/2.5/'\n}\n\nexport default api;","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nexport const Button = styled.button`\n  background: rgba(0,0,0,0.1);\n  padding: 15px;\n  margin-top: -40px;\n  margin-bottom: 30px;\n  border-radius: 16px;\n  border: none;\n  outline: none;\n  color: #fff;\n  font-size: 20px;\n  font-weight: 500;\n  box-shadow: 0px 5px rgba(0,0,0,0.2);\n\n  :active{\n    box-shadow: none;\n  }\n\n`;","import React from 'react';\n\nimport { Container, Button } from './styles';\n\nexport default function ButtonBox({handleClick, children = \"\"}) {\n  return (\n    <Container>\n      <Button onClick={handleClick}>{children}</Button>\n    </Container>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  text-align: center;\n`;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  color: #fff;\n  font-size: 48px;\n  font-weight: 700;\n  text-shadow: 3px 6px rgba(50,50,70,0.5);\n`;\n","import React from 'react';\n\nimport { Container } from './styles';\n\nexport default function WeatherMain({children}) {\n  return (\n    <Container>\n      {children}\n    </Container>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  position: relative;\n  display: inline-block;\n  margin: 30px auto;\n  background-color: rgba(255,255,255,0.2);\n  border-radius: 16px;\n\n  padding: 15px 25px;\n\n  color: #fff;\n  font-size: 102px;\n  font-weight: 900;\n\n  text-shadow: 3px 6px rgba(50,50,70,0.5);\n  text-align: center;\n\n  box-shadow: 3px 6px rgba(0,0,0,0.2);\n`;\n","import React from 'react';\n\nimport { Container } from './styles';\n\nexport default function TempBox({children}) {\n  return (\n    <Container>\n      {children}\n  </Container>\n  );\n}\n","import React from 'react';\n\nimport { Container } from './styles';\n\nimport WeatherMain from '../../atoms/WeatherMain';\nimport TempBox from '../../molecules/TempBox';\n\nexport default function WeatherBox({weather}) {\n  return (\n    <Container>\n      {\n        (typeof weather !== \"undefined\")\n        ? (<>\n            <TempBox>\n              {Math.round(weather.main.temp)}Â°c\n            </TempBox>\n            <WeatherMain>\n              {weather.weather[0].main}\n            </WeatherMain>\n          </>)\n        : (<></>)\n      }\n    </Container>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  \n`;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  color: #fff;\n  font-size: 32px;\n  font-weight: 500;\n  text-align: center;\n  text-shadow: 3px 3px rgba(50,50,70,0.5);\n`;\n","import React from 'react';\n\nimport { Container } from './styles';\n\nexport default function Location({children}) {\n  return (\n    <Container>{children}</Container>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  color: #fff;\n  font-size: 20px;\n  font-weight: 300;\n  font-style: italic;\n  text-align: center;\n  text-shadow: 2px 2px rgba(50,50,70,0.5);\n`;\n","import React from 'react';\n\nimport { Container } from './styles';\n\nexport default function DateNow() {\n\n  const dateBuilder = d => {\n    let months = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\"\n                 ,\"August\",\"September\",\"October\",\"November\",\"December\"];\n    let days = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day}, ${date} ${month} ${year}`;\n  }\n\n  return (\n    <Container>\n      {dateBuilder(new Date())}\n    </Container>\n  );\n}\n","import React from 'react';\n\nimport { Container } from './styles';\n\nimport Location from '../../atoms/Location';\nimport DateNow from '../../atoms/DateNow';\n\nexport default function LocalizationBox({weather}) {\n  return (\n    <Container>\n      {\n        (typeof weather !== \"undefined\")\n        ? <>\n          <Location>{weather.name}, {weather.sys.country}</Location>\n          <DateNow />\n        </>\n        : <></>\n      }\n    </Container>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  width: 100%;\n  margin: 0 auto 75px;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  width: 100%;\n  padding: 15px;\n\n  appearance: none;\n  background: none;\n  border: none;\n  outline: none;\n\n  background-color: rgba(255,255,255,0.5);\n  border-radius: 0px 0px 16px 16px;\n  margin-top: -25px;\n\n  box-shadow: 0px 5px rgba(0,0,0,0.2);\n\n  color: #313131;\n  font-size: 20px;\n\n  transition: 0.4s ease;\n\n  :focus{\n    background-color: rgba(255,255,255,0.75);\n  }\n`;","import React from 'react';\n\nimport { Container, Input } from './styles';\n\nexport default function SearchBox({setQuery, query, fetchAPI, location}) {\n\n  const search = evt => {\n    if(evt.key === 'Enter'){\n      fetchAPI();\n    }\n  }\n\n  return (\n    <Container>\n      <Input \n        type=\"text\"\n        placeholder=\"Search...\"\n        onChange={e => setQuery(e.target.value)}\n        value={query}\n        onKeyPress={search}\n      />\n    </Container>\n  );\n}\n","import React, { useState, useEffect } from 'react';\n\nimport axios from 'axios';\n\nimport api from './config/api'\n\nimport ButtonBox from './components/organisms/ButtonBox';\nimport WeatherBox from './components/organisms/WeatherBox';\nimport LocalizationBox from './components/organisms/LocalizationBox';\nimport SearchBox from './components/organisms/SearchBox';\n\nrequire('dotenv').config();\n\nfunction App() {\n\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n  const [location, setLocation] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n\n  async function fetchAPI() {\n    await fetch(`${api.base}weather?q=${query || location}&units=metric&APPID=${api.key}`)\n            .then(res => res.json())\n            .then(result => {\n              setWeather(result);\n              setQuery('');\n            });\n  }\n\n  function handleClick() {\n    fetchAPI();\n  }\n\n  useEffect(()=>{\n    async function search() {\n      const response = await axios.get(`https://geolocation-db.com/jsonp/`);\n      const data = await JSON.parse(response.data.replace(\"callback(\",\"\").replace(\")\",\"\"));\n      setLocation(`${data.city}, ${data.country_name}`)\n      setCity(data.city);\n    } \n    search();\n  },[location])\n\n  return (\n    <div className={(typeof weather.main != \"undefined\") \n        ? ((weather.main.temp > 16) \n        ? 'app warm' : 'app') \n        : 'app'} >\n      <main>\n        <SearchBox \n          setQuery={setQuery}\n          query={query}\n          api={api}\n          setWeather={setWeather}\n          location={location}\n          fetchAPI={fetchAPI}\n        />\n        <ButtonBox handleClick={e => handleClick()}>What's {city} temperature?</ButtonBox>  \n        {(typeof weather.main != \"undefined\") ? (\n          <>\n            <LocalizationBox \n              weather={weather}\n            />\n            <WeatherBox \n              weather={weather}\n            />\n          </>\n          ):(<></>)}     \n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GlobalStyle } from './styles';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<>\n  <GlobalStyle />\n  <App />\n</>, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}